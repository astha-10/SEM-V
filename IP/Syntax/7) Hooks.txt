useState Hooks:
import { useState } from 'react';

function Component() {
  const [state, setState] = useState(initialValue);

  return (
    <div>
      {/* Your JSX here */}
    </div>
  );
}
-------------------------

useEffect Hooks:
import { useEffect } from 'react';

function Component() {
  useEffect(() => {
    // Code to run on mount and/or update
    return () => {
      // Cleanup code (if any)
    };
  }, [dependencies]); // Empty array = run only once on mount

  return (
    <div>
      {/* Your JSX here */}
    </div>
  );
}
---------------------------

useContext Hooks:
import { useContext } from 'react';
import { MyContext } from './MyContext';

function Component() {
  const value = useContext(MyContext);

  return (
    <div>
      {/* Use the value from context */}
    </div>
  );
}
----------------------------

useRef Hooks:
import { useRef } from 'react';

function Component() {
  const inputRef = useRef();

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={() => inputRef.current.focus()}>Focus Input</button>
    </div>
  );
}
-----------------------------

useReducer Hook
import { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
}
